# -*- coding: utf-8 -*-


'''
[2,0],[3,0],[5,0],[6,-1],[7,-1],[8,-1],[8,-1],[9,-1],[9,-1],[10,-1],[11,-1],[11,-1],[12,-1],[13,-2],[14,-2],[15,-2],[16,-2],[16,-2],[17,-2],[18,-2],[18,-2],[19,-2],[20,-2],[20,-2],[20,-2],[21,-2],[21,-3],[22,-3],[22,-3],[23,-3],[23,-3],[25,-3],[28,-3],[29,-3],[29,-3],[31,-4],[32,-4],[33,-4],[34,-4],[35,-4],[36,-4],[38,-4],[39,-5],[40,-5],[42,-5],[43,-5],[44,-5],[46,-5],[48,-5],[50,-5],[51,-5],[53,-5],[55,-5],[57,-5],[58,-5],[60,-5],[61,-5],[63,-5],[64,-5],[66,-5],[67,-5],[68,-5],[69,-5],[70,-5],[72,-5],[73,-5],[74,-6],[76,-6],[77,-6],[78,-6],[79,-6],[80,-6],[82,-6],[83,-6],[84,-6],[85,-6],[86,-6],[87,-6],[88,-6],[89,-6],[90,-6],[91,-6],[92,-6],[94,-6],[95,-5],[96,-5],[98,-5],[99,-5],[100,-5],[102,-5],[103,-5],[104,-5],[104,-5],[105,-6],[106,-6],[107,-6],[108,-6],[109,-6],[110,-6],[110,-6],[111,-6],[112,-6],[113,-6],[114,-6],[115,-6],[116,-6],[117,-6],[119,-6],[119,-6],[120,-6],[121,-6],[122,-6],[123,-7],[123,-7],[125,-7],[126,-7],[127,-7],[127,-7],[128,-7],[129,-8],[129,-8],[129,-8],[129,-9],[130,-9],[131,-9],[132,-9],[132,-9],[133,-9],[134,-9],[134,-9],[135,-9],[136,-9],[136,-9],[137,-9],[137,-9],[138,-9],[138,-9],[138,-9],[139,-9],[139,-9],[140,-9],[140,-9],[141,-9],[141,-9],[141,-9],[142,-9],[142,-9],[143,-9],[143,-9],[143,-9],[144,-9],[144,-9],[144,-9],[144,-9],[145,-9],[145,-9],[146,-9],[146,-9],[146,-9],[147,-9],[147,-10],[147,-10],[148,-10],[148,-10],[148,-10],[148,-10],[148,-10],[148,-11],[149,-11],[149,-11],[149,-11],[149,-11],[150,-11],[150,-11],[150,-11],[151,-11],[151,-11],[151,-11],[151,-11],[151,-11],[152,-11],[152,-12],[152,-12],[152,-12],[153,-12],[153,-12],[153,-12],[153,-12],[154,-12],[154,-12],[154,-12],[154,-12],[155,-12],[155,-12],[155,-12],[155,-12],[155,-12],[156,-12],[156,-11],[156,-11],[156,-11],[156,-11],[157,-11]]
'''

import random

width = 320
height = 150


# def build_paths(distance: int):
#     '''
#     实际图片进行了缩放
#     :param distance:
#     :return:
#     '''
#     paths = []
#     real_distance = distance * 320 // 400
#
#     sum = 0
#     while sum < real_distance:
#         remain_distance = real_distance - sum
#         if remain_distance > 30:
#             step_x = random.choices([7, 12])[0]
#         elif remain_distance > 12:
#             step_x = random.choices([4, 6])[0]
#         else:
#             step_x = random.choices([1, 2])[0]
#         step_y = random.choices(list(range(-10, 10)))[0]
#         sum += step_x
#         paths.append([step_x, step_y])
#
#     return paths


def build_paths(distance):
    distance = distance * 320 // 400
    tracks = []

    sum_pos = 0
    paths = [200, -80, -40, 50]
    for pos in paths:
        sum_pos += pos
        tracks.append([pos, random.choices(list(range(-10, 10)))[0]])

    tracks.append([distance - sum_pos, random.choices(list(range(-10, 10)))[0]])

    return tracks


if __name__ == '__main__':
    paths = build_paths(150)
    print(paths)
